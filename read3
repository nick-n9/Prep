Step 1: Implementing the Service and Repository Layers for Job Creation & Position Management
We will first create the repository layer, followed by the service layer, ensuring a clean architecture.

1. Repository Layer
The repository layer will handle database interactions using Entity Framework Core.

IPositionRepository Interface
Create an interface in Repositories/Interfaces/IPositionRepository.cs:

csharp
Copy
Edit
using System.Collections.Generic;
using System.Threading.Tasks;
using RecruitmentProcessManagement.Models;

namespace RecruitmentProcessManagement.Repositories.Interfaces
{
    public interface IPositionRepository
    {
        Task<IEnumerable<Position>> GetAllPositionsAsync();
        Task<Position> GetPositionByIdAsync(int id);
        Task AddPositionAsync(Position position);
        Task UpdatePositionAsync(Position position);
        Task DeletePositionAsync(int id);
    }
}
PositionRepository Implementation
Create Repositories/PositionRepository.cs:

csharp
Copy
Edit
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using RecruitmentProcessManagement.Data;
using RecruitmentProcessManagement.Models;
using RecruitmentProcessManagement.Repositories.Interfaces;

namespace RecruitmentProcessManagement.Repositories
{
    public class PositionRepository : IPositionRepository
    {
        private readonly ApplicationDbContext _context;

        public PositionRepository(ApplicationDbContext context)
        {
            _context = context;
        }

        public async Task<IEnumerable<Position>> GetAllPositionsAsync()
        {
            return await _context.Positions
                .Include(p => p.RequiredSkills)
                .Include(p => p.PreferredSkills)
                .ToListAsync();
        }

        public async Task<Position> GetPositionByIdAsync(int id)
        {
            return await _context.Positions
                .Include(p => p.RequiredSkills)
                .Include(p => p.PreferredSkills)
                .FirstOrDefaultAsync(p => p.PositionID == id);
        }

        public async Task AddPositionAsync(Position position)
        {
            _context.Positions.Add(position);
            await _context.SaveChangesAsync();
        }

        public async Task UpdatePositionAsync(Position position)
        {
            _context.Positions.Update(position);
            await _context.SaveChangesAsync();
        }

        public async Task DeletePositionAsync(int id)
        {
            var position = await _context.Positions.FindAsync(id);
            if (position != null)
            {
                _context.Positions.Remove(position);
                await _context.SaveChangesAsync();
            }
        }
    }
}
2. Service Layer
The service layer will contain business logic.

IPositionService Interface
Create Services/Interfaces/IPositionService.cs:

csharp
Copy
Edit
using System.Collections.Generic;
using System.Threading.Tasks;
using RecruitmentProcessManagement.Models;

namespace RecruitmentProcessManagement.Services.Interfaces
{
    public interface IPositionService
    {
        Task<IEnumerable<Position>> GetAllPositionsAsync();
        Task<Position> GetPositionByIdAsync(int id);
        Task AddPositionAsync(Position position);
        Task UpdatePositionAsync(Position position);
        Task DeletePositionAsync(int id);
    }
}
PositionService Implementation
Create Services/PositionService.cs:

csharp
Copy
Edit
using System.Collections.Generic;
using System.Threading.Tasks;
using RecruitmentProcessManagement.Models;
using RecruitmentProcessManagement.Repositories.Interfaces;
using RecruitmentProcessManagement.Services.Interfaces;

namespace RecruitmentProcessManagement.Services
{
    public class PositionService : IPositionService
    {
        private readonly IPositionRepository _positionRepository;

        public PositionService(IPositionRepository positionRepository)
        {
            _positionRepository = positionRepository;
        }

        public async Task<IEnumerable<Position>> GetAllPositionsAsync()
        {
            return await _positionRepository.GetAllPositionsAsync();
        }

        public async Task<Position> GetPositionByIdAsync(int id)
        {
            return await _positionRepository.GetPositionByIdAsync(id);
        }

        public async Task AddPositionAsync(Position position)
        {
            await _positionRepository.AddPositionAsync(position);
        }

        public async Task UpdatePositionAsync(Position position)
        {
            await _positionRepository.UpdatePositionAsync(position);
        }

        public async Task DeletePositionAsync(int id)
        {
            await _positionRepository.DeletePositionAsync(id);
        }
    }
}
3. Register Dependencies in Program.cs
Update Program.cs to register services and repositories:

csharp
Copy
Edit
builder.Services.AddScoped<IPositionRepository, PositionRepository>();
builder.Services.AddScoped<IPositionService, PositionService>();


1. Create PositionController.cs
Navigate to the Controllers folder and create PositionController.cs:

using Microsoft.AspNetCore.Mvc;
using RecruitmentProcessManagement.Models;
using RecruitmentProcessManagement.Services.Interfaces;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace RecruitmentProcessManagement.Controllers
{
    public class PositionController : Controller
    {
        private readonly IPositionService _positionService;

        public PositionController(IPositionService positionService)
        {
            _positionService = positionService;
        }

        // GET: Position/Index
        public async Task<IActionResult> Index()
        {
            var positions = await _positionService.GetAllPositionsAsync();
            return View(positions);
        }

        // GET: Position/Create
        public IActionResult Create()
        {
            return View();
        }

        // POST: Position/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create(Position position)
        {
            if (ModelState.IsValid)
            {
                await _positionService.AddPositionAsync(position);
                return RedirectToAction(nameof(Index));
            }
            return View(position);
        }

        // GET: Position/Edit/5
        public async Task<IActionResult> Edit(int id)
        {
            var position = await _positionService.GetPositionByIdAsync(id);
            if (position == null)
            {
                return NotFound();
            }
            return View(position);
        }

        // POST: Position/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, Position position)
        {
            if (id != position.PositionID)
            {
                return BadRequest();
            }

            if (ModelState.IsValid)
            {
                await _positionService.UpdatePositionAsync(position);
                return RedirectToAction(nameof(Index));
            }
            return View(position);
        }

        // GET: Position/Delete/5
        public async Task<IActionResult> Delete(int id)
        {
            var position = await _positionService.GetPositionByIdAsync(id);
            if (position == null)
            {
                return NotFound();
            }
            return View(position);
        }

        // POST: Position/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            await _positionService.DeletePositionAsync(id);
            return RedirectToAction(nameof(Index));
        }

        // PUT: Position/Close/5
        [HttpPost]
        public async Task<IActionResult> Close(int id, string closureReason)
        {
            var position = await _positionService.GetPositionByIdAsync(id);
            if (position == null)
            {
                return NotFound();
            }

            position.Status = "Closed";
            position.ClosureReason = closureReason;
            await _positionService.UpdatePositionAsync(position);

            return RedirectToAction(nameof(Index));
        }
    }
}


1. Create Index.cshtml
This view displays a list of job positions with an option to add new positions and manage their status.

Location: Views/Position/Index.cshtml


@model IEnumerable<RecruitmentProcessManagement.Models.Position>

@{
    ViewData["Title"] = "Job Positions";
}

<h1>@ViewData["Title"]</h1>

<a href="@Url.Action("Create")" class="btn btn-primary mb-3">Create New Position</a>

<table class="table table-bordered">
    <thead>
        <tr>
            <th>Position Title</th>
            <th>Status</th>
            <th>Skills Required</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var position in Model)
        {
            <tr>
                <td>@position.PositionTitle</td>
                <td>@position.Status</td>
                <td>@position.RequiredSkills</td>
                <td>
                    <a href="@Url.Action("Edit", new { id = position.PositionID })" class="btn btn-warning btn-sm">Edit</a>
                    <a href="@Url.Action("Delete", new { id = position.PositionID })" class="btn btn-danger btn-sm">Delete</a>

                    @if (position.Status != "Closed")
                    {
                        <form action="@Url.Action("Close", new { id = position.PositionID })" method="post" style="display:inline;">
                            <input type="text" name="closureReason" class="form-control d-inline-block w-auto" placeholder="Reason for closure" required />
                            <button type="submit" class="btn btn-danger btn-sm mt-2">Close Position</button>
                        </form>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>




2. Create Create.cshtml
This view allows recruiters to create a new job position.

Location: Views/Position/Create.cshtml

@model RecruitmentProcessManagement.Models.Position

@{
    ViewData["Title"] = "Create New Position";
}

<h1>@ViewData["Title"]</h1>

<form asp-action="Create" method="post" class="mt-3">
    <div class="form-group">
        <label asp-for="PositionTitle" class="control-label"></label>
        <input asp-for="PositionTitle" class="form-control" />
        <span asp-validation-for="PositionTitle" class="text-danger"></span>
    </div>
    
    <div class="form-group">
        <label asp-for="RequiredSkills" class="control-label"></label>
        <input asp-for="RequiredSkills" class="form-control" />
        <span asp-validation-for="RequiredSkills" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="PositionDescription" class="control-label"></label>
        <textarea asp-for="PositionDescription" class="form-control"></textarea>
        <span asp-validation-for="PositionDescription" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Status" class="control-label"></label>
        <select asp-for="Status" class="form-control">
            <option value="Open">Open</option>
            <option value="On Hold">On Hold</option>
        </select>
        <span asp-validation-for="Status" class="text-danger"></span>
    </div>

    <button type="submit" class="btn btn-success">Create Position</button>
</form>

<a href="@Url.Action("Index")" class="btn btn-secondary mt-3">Back to List</a>


3. Create Edit.cshtml
This view allows recruiters to edit an existing job position.

Location: Views/Position/Edit.cshtml


@model RecruitmentProcessManagement.Models.Position

@{
    ViewData["Title"] = "Edit Position";
}

<h1>@ViewData["Title"]</h1>

<form asp-action="Edit" method="post" class="mt-3">
    <input asp-for="PositionID" type="hidden" />

    <div class="form-group">
        <label asp-for="PositionTitle" class="control-label"></label>
        <input asp-for="PositionTitle" class="form-control" />
        <span asp-validation-for="PositionTitle" class="text-danger"></span>
    </div>
    
    <div class="form-group">
        <label asp-for="RequiredSkills" class="control-label"></label>
        <input asp-for="RequiredSkills" class="form-control" />
        <span asp-validation-for="RequiredSkills" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="PositionDescription" class="control-label"></label>
        <textarea asp-for="PositionDescription" class="form-control"></textarea>
        <span asp-validation-for="PositionDescription" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Status" class="control-label"></label>
        <select asp-for="Status" class="form-control">
            <option value="Open" @(Model.Status == "Open" ? "selected" : "")>Open</option>
            <option value="On Hold" @(Model.Status == "On Hold" ? "selected" : "")>On Hold</option>
        </select>
        <span asp-validation-for="Status" class="text-danger"></span>
    </div>

    <button type="submit" class="btn btn-warning">Update Position</button>
</form>

<a href="@Url.Action("Index")" class="btn btn-secondary mt-3">Back to List</a>


4. Create Delete.cshtml
This view confirms the deletion of a job position.

Location: Views/Position/Delete.cshtml
html
Copy
Edit
@model RecruitmentProcessManagement.Models.Position

@{
    ViewData["Title"] = "Delete Position";
}

<h1>@ViewData["Title"]</h1>

<p>Are you sure you want to delete the position titled "<strong>@Model.PositionTitle</strong>"?</p>

<form asp-action="DeleteConfirmed" method="post">
    <input asp-for="PositionID" type="hidden" />
    <button type="submit" class="btn btn-danger">Yes, Delete</button>
    <a href="@Url.Action("Index")" class="btn btn-secondary">Cancel</a>
</form>

5. Validation & Form Handling
Validation: Use the built-in validation features of ASP.NET Core 8 for form validation (e.g., asp-validation-for).
Bootstrap: Formatted with Bootstrap classes for responsiveness and styling.

